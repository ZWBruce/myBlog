{"version":3,"sources":["components/main/Main.tsx","components/Head/Head.tsx","components/category/index.tsx","components/tags/index.tsx","components/write/Write.tsx","App.tsx","serviceWorker.ts","context.ts","index.tsx"],"names":["initalSate","count","reducer","state","action","type","cb","useCallback","console","log","val","useMemo","imgRef","useRef","useReducer","useEffect","axios","url","method","then","res","onClick","className","ref","images","current","files","fd","FormData","append","data","props","React","Children","map","children","child","text","ind","to","key","activeClassName","TextArea","title","content","dispatch","change","e","target","value","onChange","placeholder","source","App","path","component","Main","Catagory","Tags","exact","from","Write","Boolean","window","location","hostname","match","context","createContext","ReactDOM","render","Provider","test","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cfe6a9ae.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useReducer, useEffect, useRef } from 'react'\nimport { Button } from 'antd'\nimport axios from 'axios'\nimport './Main.less'\n\ninterface Act {\n  type: string;\n  val?: any\n}\n\nconst initalSate = { count: 0 }\n\nfunction reducer(state: any, action: Act) {\n  const { count } = state\n  switch (action.type) {\n    case 'add':\n      return { count: count + 1 }\n    case 'desc':\n      return { count: count - 1 }\n    default:\n      return state\n  }\n}\n\nexport default function () {\n  const cb = useCallback(() => {\n    console.log('use callback')\n  }, [])\n\n  const val = useMemo(() => {\n    console.log('in use memo')\n    return '三只松鼠'\n  }, [])\n  console.log({ val, cb })\n\n  const imgRef = useRef(null)\n\n  const [state, dispatch1] = useReducer(reducer, initalSate)\n\n\n  useEffect(() => {\n\n    axios(\n      {\n        url: 'http://localhost:8090/articles/list',\n        method: 'get'\n      }\n    ).then(res => {\n      console.log(res)\n    })\n  }, [])\n\n  function upload() {\n    const imgDom = imgRef.current as unknown\n    const images: any = (imgDom as HTMLInputElement).files\n    const fd = new FormData()\n    fd.append('image', images[0])\n    fd.append('msg', 'abcd')\n    axios(\n      {\n        url: 'http://localhost:8090/upload',\n        method: 'post',\n        data: fd\n      }\n    ).then(res => {\n      console.log(res)\n    })\n  }\n\n\n  // function upload() {\n\n  // }\n\n  return <div onClick={cb} className=\"main-wrapp\">\n    {val}main comp {state.count}\n    <input type=\"file\" ref={imgRef} />\n    <Button type=\"primary\" onClick={upload}>add</Button>\n  </div>\n}","import React, { ReactChild, useState } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './Head.less'\n\nexport default function (props: { children: ReactChild }) {\n  let links = [{\n    text: '主页',\n    url: '/index'\n  },\n  {\n    text: '淘宝',\n    url: '/catagory'\n  },\n  {\n    text: '字节跳动',\n    url: '/tags'\n  }\n  ]\n\n  if (process.env.NODE_ENV === 'development') {\n    links.push({\n      text: '写文章',\n      url: '/write'\n    })\n  }\n\n  return <nav className=\"app-header\">\n    <div className=\"app app-inner-header\">\n      {\n        React.Children.map(props.children, child => {\n          return <div>{child}</div>\n        })\n      }\n      <div className=\"links\">\n        {\n          links.map(({ url, text }, ind) => {\n            return <NavLink to={url} key={ind} activeClassName=\"active\">{text}</NavLink>\n          })\n        }\n      </div>\n    </div>\n  </nav>\n}","import React from 'react'\n\nexport default function () {\n  return <div>\n    catagory\n  </div>\n}","import React from 'react'\n\nexport default function () {\n  return <div>\n    tags\n  </div>\n}","import React, { useReducer, useEffect, useRef, useContext } from 'react'\nimport { Button, Input } from 'antd'\nimport axios from 'axios'\nimport './Write.less'\nimport MarkDown from 'react-markdown'\nimport { context } from '../../context'\n\nconst { TextArea } = Input\n\ninterface Act {\n  type: string;\n  val?: any\n}\n\nconst initalSate = { title: '', content: '' }\n\nfunction reducer(state: any, action: Act) {\n  switch (action.type) {\n    case 'changeTitle':\n      return { ...state, title: action.val }\n    case 'changeContent':\n      return { ...state, content: action.val }\n    default:\n      return state\n  }\n}\n\nexport default function () {\n\n  const [state, dispatch] = useReducer(reducer, initalSate)\n  // const data = useContext(context)\n\n\n  function change(e: any, type = 'changeTitle') {\n    console.log(e.target.value)\n    dispatch({\n      type,\n      val: e.target.value\n    })\n  }\n\n  function upload() {\n    if (!state.title || !state.title) {\n\n      return\n    }\n    const url = 'http://localhost:8090/articles/send'\n    const fd = new FormData()\n    fd.append('title', state.title)\n    fd.append('content', state.content)\n    axios({\n      url,\n      method: 'post',\n      data: fd\n    }).then(res => {\n      console.log(res)\n    })\n  }\n\n  return <div className=\"write-wrap\">\n    <div className=\"flex\">\n      <Input value={state.title} onChange={(e) => change(e)} placeholder='文章标题' />\n      <Button type=\"primary\" onClick={upload}>上传文章</Button>\n    </div>\n    <div className=\"flex content\">\n      <div className=\"inner-content\">\n        <TextArea value={state.content} onChange={(e) => change(e, 'changeContent')} placeholder='文章内容' />\n      </div>\n      <div className=\"inner-content\">\n        <MarkDown source={state.content} />\n      </div>\n    </div>\n\n  </div>\n}","import React from 'react';\nimport Main from './components/main/Main'\nimport Head from './components/Head/Head'\nimport Catagory from './components/category/index'\nimport Tags from './components/tags/index'\nimport Write from './components/write/Write'\nimport { HashRouter, Route, Redirect } from 'react-router-dom'\nimport './App.less';\n\nfunction App() {\n  return (\n    <HashRouter>\n\n      <Head>\n        zw\n      </Head>\n      <div className='app'>\n        <Route path='/index' component={Main} />\n        <Route path='/catagory' component={Catagory} />\n        <Route path='/tags' component={Tags} />\n        <Redirect exact from='/' to='/index' />\n        <Route path='/write' component={Write} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createContext } from 'react'\n\nexport const context = createContext<any>({})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { context } from './context'\n\nconst globalData = {\n  test: 'abc'\n}\n\nReactDOM.render(\n  <context.Provider value={globalData} >\n    <App />\n  </context.Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}