{"version":3,"sources":["components/main/Main.tsx","components/Head/Head.tsx","components/category/index.tsx","components/tags/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initalSate","count","reducer","state","action","type","cb","useCallback","console","log","val","useMemo","imgRef","useRef","useReducer","useEffect","onClick","className","ref","images","current","files","fd","FormData","append","axios","url","method","data","then","res","props","useState","React","Children","map","children","child","text","ind","to","key","activeClassName","App","source","path","component","Main","Catagory","Tags","exact","from","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2TAUMA,G,OAAa,CAAEC,MAAO,IAE5B,SAASC,EAAQC,EAAYC,GAAc,IACjCH,EAAUE,EAAVF,MACR,OAAQG,EAAOC,MACb,IAAK,MACH,MAAO,CAAEJ,MAAOA,EAAQ,GAC1B,IAAK,OACH,MAAO,CAAEA,MAAOA,EAAQ,GAC1B,QACE,OAAOE,GAIE,iBACb,IAAMG,EAAKC,uBAAY,WACrBC,QAAQC,IAAI,kBACX,IAEGC,EAAMC,mBAAQ,WAElB,OADAH,QAAQC,IAAI,eACL,6BACN,IACHD,QAAQC,IAAI,CAAEC,MAAKJ,OAEnB,IAAMM,EAASC,iBAAO,MAXG,EAaEC,qBAAWZ,EAASF,GAbtB,mBAalBG,EAbkB,UAkDzB,OAlCAY,qBAAU,WAaRP,QAAQC,IAAIN,KACX,CAACA,IAoBG,yBAAKa,QAASV,EAAIW,UAAU,cAChCP,EADI,aACWP,EAAMF,MACtB,2BAAOI,KAAK,OAAOa,IAAKN,IACxB,uBAAQP,KAAK,UAAUW,QArBzB,WACE,IACMG,EADSP,EAAOQ,QAC2BC,MAC3CC,EAAK,IAAIC,SACfD,EAAGE,OAAO,QAASL,EAAO,IAC1BG,EAAGE,OAAO,MAAO,QACjBC,IACE,CACEC,IAAK,+BACLC,OAAQ,OACRC,KAAMN,IAERO,MAAK,SAAAC,GACLtB,QAAQC,IAAIqB,MAEdtB,QAAQC,IAAKU,EAAiB,MAM9B,S,QCzEW,G,OAAA,SAAUY,GACvB,IADwD,EAe5BC,mBAAS,GAfmB,6BAgBxD,OAAO,yBAAKf,UAAU,cAElBgB,IAAMC,SAASC,IAAIJ,EAAMK,UAAU,SAAAC,GACjC,OAAO,6BAAMA,MAGjB,yBAAKpB,UAAU,SArBH,CAAC,CACbqB,KAAM,eACNZ,IAAK,UAEP,CACEY,KAAM,eACNZ,IAAK,aAEP,CACEY,KAAM,2BACNZ,IAAK,UAaKS,KAAI,WAAgBI,GAAS,IAAtBb,EAAqB,EAArBA,IAAKY,EAAgB,EAAhBA,KAChB,OAAO,kBAAC,IAAD,CAASE,GAAId,EAAKe,IAAKF,EAAKG,gBAAgB,UAAUJ,UC3BxD,aACb,OAAO,0CCDM,aACb,OAAO,sC,cCuBMK,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,WAGA,kBAAC,IAAD,CAAU2B,OAAQ,sDAClB,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWE,IACnC,kBAAC,IAAD,CAAOH,KAAK,QAAQC,UAAWG,IAC/B,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIX,GAAG,cCRhBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,a","file":"static/js/main.553e38f4.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useReducer, useEffect, useRef } from 'react'\nimport { Button } from 'antd'\nimport axios from 'axios'\nimport './Main.less'\n\ninterface Act {\n  type: string;\n  val?: any\n}\n\nconst initalSate = { count: 0 }\n\nfunction reducer(state: any, action: Act) {\n  const { count } = state\n  switch (action.type) {\n    case 'add':\n      return { count: count + 1 }\n    case 'desc':\n      return { count: count - 1 }\n    default:\n      return state\n  }\n}\n\nexport default function () {\n  const cb = useCallback(() => {\n    console.log('use callback')\n  }, [])\n\n  const val = useMemo(() => {\n    console.log('in use memo')\n    return '三只松鼠'\n  }, [])\n  console.log({ val, cb })\n\n  const imgRef = useRef(null)\n\n  const [state, dispatch1] = useReducer(reducer, initalSate)\n\n\n  useEffect(() => {\n    // const timer: any = setInterval(() => {\n    //   console.log(state)\n    //   if (state.count > 10) {\n    //     clearInterval(timer)\n    //     return\n    //   }\n    //   dispatch1({ type: 'add' })\n    // }, 1000)\n\n    // return () => {\n    //   clearInterval(timer)\n    // }\n    console.log(state)\n  }, [state])\n\n  function upload() {\n    const imgDom = imgRef.current as unknown\n    const images: any = (imgDom as HTMLInputElement).files\n    const fd = new FormData()\n    fd.append('image', images[0])\n    fd.append('msg', 'abcd')\n    axios(\n      {\n        url: 'http://localhost:8090/upload',\n        method: 'post',\n        data: fd\n      }\n    ).then(res => {\n      console.log(res)\n    })\n    console.log((images as any[])[0])\n  }\n\n  return <div onClick={cb} className=\"main-wrapp\">\n    {val}main comp {state.count}\n    <input type=\"file\" ref={imgRef} />\n    <Button type=\"primary\" onClick={upload}>add</Button>\n  </div>\n}","import React, { ReactChild, useState } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './Head.less'\n\nexport default function (props: { children: ReactChild }) {\n  const links = [{\n    text: '主页',\n    url: '/index'\n  },\n  {\n    text: '淘宝',\n    url: '/catagory'\n  },\n  {\n    text: '字节跳动',\n    url: '/tags'\n  }\n  ]\n\n  const [active, setActive] = useState(0)\n  return <nav className=\"app-header\">\n    {\n      React.Children.map(props.children, child => {\n        return <div>{child}</div>\n      })\n    }\n    <div className=\"links\">\n      {\n        links.map(({ url, text }, ind) => {\n          return <NavLink to={url} key={ind} activeClassName=\"active\">{text}</NavLink>\n        })\n      }\n    </div>\n  </nav>\n}","import React from 'react'\n\nexport default function () {\n  return <div>\n    catagory\n  </div>\n}","import React from 'react'\n\nexport default function () {\n  return <div>\n    tags\n  </div>\n}","import React from 'react';\nimport MarkDown from 'react-markdown'\nimport Main from './components/main/Main'\nimport Head from './components/Head/Head'\nimport Catagory from './components/category/index'\nimport Tags from './components/tags/index'\nimport { HashRouter, Route, Redirect } from 'react-router-dom'\nimport './App.less';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className='app'>\n        <Head>\n          zw\n        </Head>\n        <MarkDown source={'# This is a header\\n\\n**And this is a paragraph**'} />\n        <Route path='/index' component={Main} />\n        <Route path='/catagory' component={Catagory} />\n        <Route path='/tags' component={Tags} />\n        <Redirect exact from='/' to='/index' />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}